{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "B5u_H5FBBrU7",
        "outputId": "3a46c97c-23e2-4fa5-9439-6f1461b26a41",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "Dataset saved in variable\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Gender    Age   Debt  Married  BankCustomer     Industry Ethnicity  \\\n",
              "0       1  30.83  0.000        1             1  Industrials     White   \n",
              "1       0  58.67  4.460        1             1    Materials     Black   \n",
              "2       0  24.50  0.500        1             1    Materials     Black   \n",
              "3       1  27.83  1.540        1             1  Industrials     White   \n",
              "4       1  20.17  5.625        1             1  Industrials     White   \n",
              "\n",
              "   YearsEmployed  PriorDefault  Employed  CreditScore  DriversLicense  \\\n",
              "0           1.25             1         1            1               0   \n",
              "1           3.04             1         1            6               0   \n",
              "2           1.50             1         0            0               0   \n",
              "3           3.75             1         1            5               1   \n",
              "4           1.71             1         0            0               0   \n",
              "\n",
              "        Citizen  ZipCode  Income  Approved  \n",
              "0       ByBirth      202       0         1  \n",
              "1       ByBirth       43     560         1  \n",
              "2       ByBirth      280     824         1  \n",
              "3       ByBirth      100       3         1  \n",
              "4  ByOtherMeans      120       0         1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d31c204c-2057-4acc-a737-1fea2ce45710\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Debt</th>\n",
              "      <th>Married</th>\n",
              "      <th>BankCustomer</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Ethnicity</th>\n",
              "      <th>YearsEmployed</th>\n",
              "      <th>PriorDefault</th>\n",
              "      <th>Employed</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>DriversLicense</th>\n",
              "      <th>Citizen</th>\n",
              "      <th>ZipCode</th>\n",
              "      <th>Income</th>\n",
              "      <th>Approved</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>30.83</td>\n",
              "      <td>0.000</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Industrials</td>\n",
              "      <td>White</td>\n",
              "      <td>1.25</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>ByBirth</td>\n",
              "      <td>202</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>58.67</td>\n",
              "      <td>4.460</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Materials</td>\n",
              "      <td>Black</td>\n",
              "      <td>3.04</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>ByBirth</td>\n",
              "      <td>43</td>\n",
              "      <td>560</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>24.50</td>\n",
              "      <td>0.500</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Materials</td>\n",
              "      <td>Black</td>\n",
              "      <td>1.50</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>ByBirth</td>\n",
              "      <td>280</td>\n",
              "      <td>824</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>27.83</td>\n",
              "      <td>1.540</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Industrials</td>\n",
              "      <td>White</td>\n",
              "      <td>3.75</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>ByBirth</td>\n",
              "      <td>100</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>20.17</td>\n",
              "      <td>5.625</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Industrials</td>\n",
              "      <td>White</td>\n",
              "      <td>1.71</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>ByOtherMeans</td>\n",
              "      <td>120</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d31c204c-2057-4acc-a737-1fea2ce45710')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d31c204c-2057-4acc-a737-1fea2ce45710 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d31c204c-2057-4acc-a737-1fea2ce45710');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9d85d045-b791-43b0-af12-70ad7f54f9b0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d85d045-b791-43b0-af12-70ad7f54f9b0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9d85d045-b791-43b0-af12-70ad7f54f9b0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 690,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.860244756156707,\n        \"min\": 13.75,\n        \"max\": 80.25,\n        \"num_unique_values\": 350,\n        \"samples\": [\n          41.75,\n          35.58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.978163248528541,\n        \"min\": 0.0,\n        \"max\": 28.0,\n        \"num_unique_values\": 215,\n        \"samples\": [\n          10.415,\n          3.29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BankCustomer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"ConsumerDiscretionary\",\n          \"ConsumerStaples\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ethnicity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Black\",\n          \"Other\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsEmployed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3465133592781333,\n        \"min\": 0.0,\n        \"max\": 28.5,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          13.5,\n          2.375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PriorDefault\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 67,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          23,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DriversLicense\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Citizen\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ByBirth\",\n          \"ByOtherMeans\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ZipCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 173,\n        \"min\": 0,\n        \"max\": 2000,\n        \"num_unique_values\": 170,\n        \"samples\": [\n          263,\n          400\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5210,\n        \"min\": 0,\n        \"max\": 100000,\n        \"num_unique_values\": 240,\n        \"samples\": [\n          100,\n          314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Approved\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ],
      "source": [
        "# Project by Maya Powell, Joo Kim, and Aika Aldayarova\n",
        "# IMPORTING DATA\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount = True)\n",
        "\n",
        "dataset = pd.read_csv('/content/drive/MyDrive/AML Project/clean_dataset.csv')\n",
        "print('Dataset saved in variable')\n",
        "dataset.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CLEANING DATA\n",
        "# Selection of relevant features (dropping unnecessary columns)\n",
        "dataset = dataset.drop(['BankCustomer', 'Industry', 'Citizen', 'ZipCode'], axis=1)\n",
        "\n",
        "# Using standardization (better than min-max scaling in this case) to normalize numerical data\n",
        "def standardization(df, column):\n",
        "  df[column] = (df[column] - df[column].mean()) / df[column].std() # The resulting values are z-scores!\n",
        "\n",
        "standardization(dataset, 'Age')\n",
        "standardization(dataset, 'Debt') # This feature was originally scaled\n",
        "standardization(dataset, 'YearsEmployed')\n",
        "standardization(dataset, 'CreditScore') # This feature was originally scaled\n",
        "standardization(dataset, 'Income') # This feature was originally scaled\n",
        "\n",
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "PXpZjRYkLnks",
        "outputId": "1ae698dc-3964-4488-8ae5-674479add81c",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Gender       Age      Debt  Married Ethnicity  YearsEmployed  PriorDefault  \\\n",
              "0       1 -0.057681 -0.955920        1     White      -0.290872             1   \n",
              "1       0  2.289656 -0.060007        1     Black       0.244013             1   \n",
              "2       0 -0.591397 -0.855481        1     Black      -0.216167             1   \n",
              "3       1 -0.310627 -0.646569        1     White       0.456175             1   \n",
              "4       1 -0.956482  0.174015        1     White      -0.153415             1   \n",
              "\n",
              "   Employed  CreditScore  DriversLicense    Income  Approved  \n",
              "0         1    -0.287892               0 -0.195272         1  \n",
              "1         1     0.740293               0 -0.087788         1  \n",
              "2         0    -0.493529               0 -0.037117         1  \n",
              "3         1     0.534656               1 -0.194696         1  \n",
              "4         0    -0.493529               0 -0.195272         1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dcac42a4-4a95-432e-8630-746b68a88d08\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Debt</th>\n",
              "      <th>Married</th>\n",
              "      <th>Ethnicity</th>\n",
              "      <th>YearsEmployed</th>\n",
              "      <th>PriorDefault</th>\n",
              "      <th>Employed</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>DriversLicense</th>\n",
              "      <th>Income</th>\n",
              "      <th>Approved</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>-0.057681</td>\n",
              "      <td>-0.955920</td>\n",
              "      <td>1</td>\n",
              "      <td>White</td>\n",
              "      <td>-0.290872</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.287892</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.195272</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>2.289656</td>\n",
              "      <td>-0.060007</td>\n",
              "      <td>1</td>\n",
              "      <td>Black</td>\n",
              "      <td>0.244013</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.740293</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.087788</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>-0.591397</td>\n",
              "      <td>-0.855481</td>\n",
              "      <td>1</td>\n",
              "      <td>Black</td>\n",
              "      <td>-0.216167</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.493529</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.037117</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>-0.310627</td>\n",
              "      <td>-0.646569</td>\n",
              "      <td>1</td>\n",
              "      <td>White</td>\n",
              "      <td>0.456175</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.534656</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.194696</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>-0.956482</td>\n",
              "      <td>0.174015</td>\n",
              "      <td>1</td>\n",
              "      <td>White</td>\n",
              "      <td>-0.153415</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.493529</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.195272</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dcac42a4-4a95-432e-8630-746b68a88d08')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dcac42a4-4a95-432e-8630-746b68a88d08 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dcac42a4-4a95-432e-8630-746b68a88d08');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9edabd78-b0eb-4ae2-a015-b475e50fa051\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9edabd78-b0eb-4ae2-a015-b475e50fa051')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9edabd78-b0eb-4ae2-a015-b475e50fa051 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 690,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000000000000009,\n        \"min\": -1.497786623063369,\n        \"max\": 4.109180296019777,\n        \"num_unique_values\": 350,\n        \"samples\": [\n          0.8630415533926923,\n          0.3428162016521958\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0,\n        \"min\": -0.9559197639988516,\n        \"max\": 4.668644679177317,\n        \"num_unique_values\": 215,\n        \"samples\": [\n          1.1362173315611408,\n          -0.2950334419256518\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ethnicity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Black\",\n          \"Other\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsEmployed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.999999999999999,\n        \"min\": -0.6643947172471629,\n        \"max\": 7.851931661963124,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          3.3696546202734994,\n          0.04529914768702762\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PriorDefault\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000000000000098,\n        \"min\": -0.49352860267821486,\n        \"max\": 13.284144888755282,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          4.2361205063213445,\n          1.357203657365091\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DriversLicense\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000000000000013,\n        \"min\": -0.19527168382016352,\n        \"max\": 18.998208312634635,\n        \"num_unique_values\": 240,\n        \"samples\": [\n          -0.17607820382370873,\n          -0.13500415663129547\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Approved\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CLEANING DATA CONT.\n",
        "\n",
        "# Perform one-hot encoding on the 'Ethnicity' column\n",
        "dataset = pd.get_dummies(dataset, columns=['Ethnicity'])\n",
        "\n",
        "# Convert boolean values to integers\n",
        "dataset = dataset.astype(int)\n",
        "\n",
        "# Display the first few rows of the dataset after encoding\n",
        "dataset.head()\n"
      ],
      "metadata": {
        "id": "mPo_KCufNZtd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "outputId": "4ad99a9c-066f-4511-b356-d52bde606e31",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Gender  Age  Debt  Married  YearsEmployed  PriorDefault  Employed  \\\n",
              "0       1    0     0        1              0             1         1   \n",
              "1       0    2     0        1              0             1         1   \n",
              "2       0    0     0        1              0             1         0   \n",
              "3       1    0     0        1              0             1         1   \n",
              "4       1    0     0        1              0             1         0   \n",
              "\n",
              "   CreditScore  DriversLicense  Income  Approved  Ethnicity_Asian  \\\n",
              "0            0               0       0         1                0   \n",
              "1            0               0       0         1                0   \n",
              "2            0               0       0         1                0   \n",
              "3            0               1       0         1                0   \n",
              "4            0               0       0         1                0   \n",
              "\n",
              "   Ethnicity_Black  Ethnicity_Latino  Ethnicity_Other  Ethnicity_White  \n",
              "0                0                 0                0                1  \n",
              "1                1                 0                0                0  \n",
              "2                1                 0                0                0  \n",
              "3                0                 0                0                1  \n",
              "4                0                 0                0                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6772eae7-590b-4d49-a389-7e4794e8f672\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Debt</th>\n",
              "      <th>Married</th>\n",
              "      <th>YearsEmployed</th>\n",
              "      <th>PriorDefault</th>\n",
              "      <th>Employed</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>DriversLicense</th>\n",
              "      <th>Income</th>\n",
              "      <th>Approved</th>\n",
              "      <th>Ethnicity_Asian</th>\n",
              "      <th>Ethnicity_Black</th>\n",
              "      <th>Ethnicity_Latino</th>\n",
              "      <th>Ethnicity_Other</th>\n",
              "      <th>Ethnicity_White</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6772eae7-590b-4d49-a389-7e4794e8f672')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6772eae7-590b-4d49-a389-7e4794e8f672 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6772eae7-590b-4d49-a389-7e4794e8f672');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3a052f4-f91f-4bcc-a951-ca59d7c5f416\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3a052f4-f91f-4bcc-a951-ca59d7c5f416')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3a052f4-f91f-4bcc-a951-ca59d7c5f416 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 690,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": -1,\n        \"max\": 4,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsEmployed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PriorDefault\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 13,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DriversLicense\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 18,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Approved\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ethnicity_Asian\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ethnicity_Black\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ethnicity_Latino\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ethnicity_Other\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ethnicity_White\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# SPLIT DATASET INTO TEST, DEV, and TRAIN SETS\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "test_data, train_data = train_test_split(dataset, test_size=0.3)\n",
        "dev_data = train_data.sample(frac=0.2)\n",
        "train_data = train_data.drop(dev_data.index)\n",
        "# test_data.head()\n",
        "# train_data.head()"
      ],
      "metadata": {
        "id": "RuzQDpqgm8an"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# MODEL 1: OLS\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import balanced_accuracy_score\n",
        "\n",
        "X_train = train_data.drop(['Approved'], axis=1)\n",
        "y_train = train_data['Approved']\n",
        "\n",
        "theta_best = np.linalg.inv(X_train.T.dot(X_train)).dot(X_train.T).dot(y_train)\n",
        "\n",
        "# Generate predictions for dev data\n",
        "X_dev = dev_data.drop(['Approved'], axis=1)\n",
        "y_dev = dev_data['Approved']\n",
        "y_dev_pred = X_dev.dot(theta_best)\n",
        "\n",
        "# Using our theta approximations, we can now compute predictions on new data points\n",
        "X_test = test_data.drop(['Approved'], axis=1)\n",
        "y_test = test_data['Approved']\n",
        "y_test_pred = X_test.dot(theta_best)\n",
        "\n",
        "# Convert continuous predictions to binary using a threshold (e.g., 0.5)\n",
        "y_train_pred = X_train.dot(theta_best)  # Predictions for the training set\n",
        "y_train_pred_binary = [1 if pred >= 0.5 else 0 for pred in y_train_pred] # Convert to binary\n",
        "y_test_pred_binary = [1 if pred >= 0.5 else 0 for pred in y_test_pred] # Convert to binary\n",
        "y_dev_pred_binary = [1 if pred >= 0.5 else 0 for pred in y_dev_pred] # Convert to binary\n",
        "\n",
        "# Metrics\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, y_train_pred_binary)\n",
        "balanced_accuracy_dev = balanced_accuracy_score(y_dev, y_dev_pred_binary)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, y_test_pred_binary)\n",
        "print(\"Balanced accuracy on train data: \", balanced_accuracy_train)\n",
        "print(\"Balanced accuracy on dev data: \", balanced_accuracy_dev)\n",
        "print(\"Balanced accuracy on test data: \", balanced_accuracy_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IuGNXMdenxMi",
        "outputId": "5310667d-eaf9-4149-807b-e00c8fe1e951"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced accuracy on train data:  0.8308292826631315\n",
            "Balanced accuracy on dev data:  0.819377990430622\n",
            "Balanced accuracy on test data:  0.8810833391352781\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MODEL 2: Logistic Regression\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Initialize the model and our pre-processed dataset\n",
        "our_log_reg = LogisticRegression(max_iter=1000)\n",
        "\n",
        "# Train the model on our training data\n",
        "our_log_reg.fit(X_train, y_train)\n",
        "\n",
        "# Generate predictions for dev data\n",
        "y_dev_pred = our_log_reg.predict(X_dev)\n",
        "\n",
        "# Predict targets of testing data\n",
        "y_test_pred = our_log_reg.predict(X_test)\n",
        "# y_test_pred\n",
        "\n",
        "# Predict targets of training data\n",
        "y_train_pred = our_log_reg.predict(X_train)\n",
        "\n",
        "\n",
        "# Metrics for bias/variance analysis\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, y_train_pred)\n",
        "balanced_accuracy_dev = balanced_accuracy_score(y_dev, y_dev_pred)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, y_test_pred)\n",
        "print(\"Balanced accuracy on train data: \", balanced_accuracy_train)\n",
        "print(\"Balanced accuracy on dev data: \", balanced_accuracy_dev)\n",
        "print(\"Balanced accuracy on test data: \", balanced_accuracy_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H_sXI3YToQld",
        "outputId": "7cf73a55-6aa9-423d-e05d-a7f0bac19986"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced accuracy on train data:  0.8317867138017381\n",
            "Balanced accuracy on dev data:  0.8456937799043063\n",
            "Balanced accuracy on test data:  0.869082016291861\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MODEL 2 CHANGED: Logistic Regression\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "\n",
        "poly = PolynomialFeatures(degree=2)  # Set the desired degree (e.g., 2 for quadratic features)\n",
        "X_train_poly = poly.fit_transform(X_train)\n",
        "X_dev_poly = poly.transform(X_dev)\n",
        "X_test_poly = poly.transform(X_test)\n",
        "\n",
        "# Initialize the model and our pre-processed dataset\n",
        "our_log_reg2 = LogisticRegression(max_iter=1000)\n",
        "\n",
        "# Train the model on our training data\n",
        "our_log_reg2.fit(X_train_poly, y_train)\n",
        "\n",
        "# Generate predictions for dev data\n",
        "y_dev_pred = our_log_reg2.predict(X_dev_poly)\n",
        "\n",
        "# Predict targets of testing data\n",
        "y_test_pred = our_log_reg2.predict(X_test_poly)\n",
        "\n",
        "# Predict targets of training data\n",
        "y_train_pred = our_log_reg2.predict(X_train_poly)\n",
        "\n",
        "\n",
        "# Metrics for bias/variance analysis\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, y_train_pred)\n",
        "balanced_accuracy_dev = balanced_accuracy_score(y_dev, y_dev_pred)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, y_test_pred)\n",
        "print(\"Balanced accuracy on train data: \", balanced_accuracy_train)\n",
        "print(\"Balanced accuracy on dev data: \", balanced_accuracy_dev)\n",
        "print(\"Balanced accuracy on test data: \", balanced_accuracy_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_mMg55pwxXuq",
        "outputId": "db361b5e-ef5e-4d9d-b3a2-67bb752a3e49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced accuracy on train data:  0.8747974664899101\n",
            "Balanced accuracy on dev data:  0.8456937799043063\n",
            "Balanced accuracy on test data:  0.8581076376801504\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MODEL 2 CHANGED 2: Logistic Regression\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "\n",
        "poly = PolynomialFeatures(degree=2)  # Set the desired degree (e.g., 2 for quadratic features)\n",
        "X_train_poly = poly.fit_transform(X_train)\n",
        "X_dev_poly = poly.transform(X_dev)\n",
        "X_test_poly = poly.transform(X_test)\n",
        "\n",
        "# Initialize the model and our pre-processed dataset\n",
        "our_log_reg3 = LogisticRegression(max_iter=3000, penalty='elasticnet', solver='saga', l1_ratio=0.3)\n",
        "\n",
        "# Train the model on our training data\n",
        "our_log_reg3.fit(X_train_poly, y_train)\n",
        "\n",
        "# Generate predictions for dev data\n",
        "y_dev_pred = our_log_reg3.predict(X_dev_poly)\n",
        "\n",
        "# Predict targets of testing data\n",
        "y_test_pred = our_log_reg3.predict(X_test_poly)\n",
        "\n",
        "# Predict targets of training data\n",
        "y_train_pred = our_log_reg3.predict(X_train_poly)\n",
        "\n",
        "\n",
        "# Metrics for bias/variance analysis\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, y_train_pred)\n",
        "balanced_accuracy_dev = balanced_accuracy_score(y_dev, y_dev_pred)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, y_test_pred)\n",
        "print(\"Balanced accuracy on train data: \", balanced_accuracy_train)\n",
        "print(\"Balanced accuracy on dev data: \", balanced_accuracy_dev)\n",
        "print(\"Balanced accuracy on test data: \", balanced_accuracy_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dOsIazslIVEp",
        "outputId": "513f2108-3683-46e5-da33-8d11021a9359"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced accuracy on train data:  0.8762704374723818\n",
            "Balanced accuracy on dev data:  0.8456937799043063\n",
            "Balanced accuracy on test data:  0.8575941655642971\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# LEARNING CURVES\n",
        "\n",
        "from sklearn.model_selection import learning_curve\n",
        "\n",
        "def plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,\n",
        "                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n",
        "    \"\"\"Generate learning curves for an algorithm.\"\"\"\n",
        "    if axes is None:\n",
        "        _, axes = plt.subplots(1, 1, figsize=(10, 5))\n",
        "\n",
        "    axes.set_title(title)\n",
        "    if ylim is not None:\n",
        "        axes.set_ylim(*ylim)\n",
        "    axes.set_xlabel(\"Training examples\")\n",
        "    axes.set_ylabel(\"Score\")\n",
        "\n",
        "    train_sizes, train_scores, test_scores, fit_times, _ = \\\n",
        "        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,\n",
        "                       train_sizes=train_sizes,\n",
        "                       return_times=True)\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "    fit_times_mean = np.mean(fit_times, axis=1)\n",
        "    fit_times_std = np.std(fit_times, axis=1)\n",
        "\n",
        "    # Plot learning curve\n",
        "    axes.grid()\n",
        "    axes.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
        "                         train_scores_mean + train_scores_std, alpha=0.1,\n",
        "                         color=\"r\")\n",
        "    axes.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
        "                         test_scores_mean + test_scores_std, alpha=0.1,\n",
        "                         color=\"g\")\n",
        "    axes.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
        "                 label=\"Training Accuracy\")\n",
        "    axes.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
        "                 label=\"Dev Set Accuracy\")\n",
        "    axes.legend(loc=\"best\")\n",
        "\n",
        "    return plt\n",
        "\n",
        "plot_learning_curve(our_log_reg, \"Original Logistic Regression Learning Curve\", X_train, y_train)\n",
        "plot_learning_curve(our_log_reg3, \"Iterated Logistic Regression Learning Curve\", X_train_poly, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 974
        },
        "id": "97h_4Ey5pi8h",
        "outputId": "17d6042f-367c-4921-bcb0-3c4a9b21769e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<module 'matplotlib.pyplot' from '/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py'>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "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IYQQQkiZoICBVBalda7SGU8IIYQQQgghpYCCK0IIIYQQQggpBRRcEUIIIYSQiksUgf37ge++Y/9WwpblkZGRWL58eZH3379/PziOQ3p6epkdEykbFFwRQgghhJCKacsWIDIS6NEDGDWK/RsZybaXAY7jCh3z588v0f2eOHECkyZNKvL+nTp1QkJCAvz8/Er0eCXRpEkTaLVaJCYmlttjVkUUXBFCCCGEkIpnyxZg2DDg1i3n7fHxbHsZBFgJCQm2sXz5cvj6+jptmz59um1fZYHkoggODi5W10SNRoOQkJBya1//+++/IycnB8OGDcNXX31VLo9ZGIvF4u5DKDEKrgghhBBCSNmTZSA7u2hDrwdeeondxtX9AMDUqWy/otyfq/txISQkxDb8/PzAcZzt6wsXLsDHxwfbt29H27ZtodVq8fvvv+Pq1asYOHAgatWqBW9vb7Rv3x579uxxut+8ZYEcx2HVqlUYMmQIateujcaNG+Pnn3+2fT9vWeDatWvh7++PnTt3omnTpvD29ka/fv2QkJBgu43VasVLL70Ef39/BAYG4rXXXsPYsWMxaNCgez7v1atXY9SoURgzZgzWrFmT7/u3bt3CyJEjERAQAC8vL7Rr1w7Hjh2zff+XX35B+/btodPpEBQUhMGDBzs9161btzrdn7+/P9auXQsAiI2NBcdx2LBhA7p16wadTof169cjLS0NI0eORFhYGDw9PdGiRQt89913TvcjSRLeffddNGjQAFqtFnXq1MHixYsBAD179sSUKVOc9k9JSYFGo8HevXvv+ZqUFAVXlUFqKpCWBphM7j4SQgghhJCSMRgAb++iDT8/lqEqiCyzjJafX9Huz2Aotacxc+ZMvP322zh//jwefPBBZGVlISYmBnv37sXp06fRr18/DBgwADdv3iz0fhYsWIAnnngCv//+Ox599FE89dRTuHPnToH7GwwGvPfee/jmm29w8OBB3Lx50ymT9s4772D9+vX48ssvcfjwYej1+nxBjSuZmZnYuHEjRo8ejT59+iAjIwOHDh2yfT8rKwvdunVDfHw8fv75Z5w9exavvvoqJEkCAPz6668YPHgwYmJicPr0aezduxcdOnS45+PmNXPmTEydOhXnz59HdHQ0jEYj2rZti19//RX//PMPJk2ahDFjxuD48eO228yaNQtvv/025syZg3PnzuHbb79F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FrdL2L17N/r16wcAGDBgALKyssL6tqamBps3b2bfdmENDQ2Q5fBf34qiwDRNAOzXeNGRfhw7diyqq6uxbds2a593330XpmlizJgxF71m6pjGYLVnzx688847SE1NDdvOfo1x0V5Rg2LHT37yE5GUlCTWrl0rjh49aj0aGhqsfX784x+Lvn37infffVd89NFHYuzYsWLs2LFRrJrORdPVAoVgv8aqLVu2CJvNJn7729+KPXv2iFdeeUW43W7xv//7v9Y+jz32mEhOThZLly4Vn376qZgxY4YYMGCA8Pl8Uayc2jN79mzRq1cv8eabb4r9+/eL4uJikZaWJu6//35rH/ZrbKitrRUff/yx+PjjjwUA8cQTT4iPP/7YWjWuI/04efJkMWLECLF582axYcMGMXjwYHH77bdH65RItN+vwWBQTJ8+XfTu3Vt88sknYe+nAoGAdQz2a+xiuKIOA9Dq46WXXrL28fl84qc//alISUkRbrdbFBQUiKNHj0avaDonzcMV+zV2vfHGG+Ib3/iGcDgcIicnR7zwwgth203TFA8++KDIzMwUDodD3HTTTaK8vDxK1VJH1NTUiLlz54q+ffsKp9MpLrnkEvHAAw+EvTFjv8aG9957r9Xfq7NnzxZCdKwfT548KW6//Xbh9XpFYmKiuOuuu0RtbW0UzoYatdev+/fvb/P91HvvvWcdg/0auyQhmtzSnYiIiIiIiM4Jr7kiIiIiIiKKAIYrIiIiIiKiCGC4IiIiIiIiigCGKyIiIiIioghguCIiIiIiIooAhisiIiIiIqIIYLgiIiIiIiKKAIYrIiIiIiKiCGC4IiKiqOjfvz+efPLJDu+/du1aSJKE6urqC1ZTPOjs15WIiCKH4YqIiNolSVK7j4ceeuicjrt161bMmTOnw/tfc801OHr0KJKSks7p8xEREV1otmgXQEREXdvRo0etj1977TUsXLgQ5eXlVpvX67U+FkLAMAzYbGf/9ZKent6pOux2O7Kysjr1GiIioouJI1dERNSurKws65GUlARJkqznZWVlSEhIwIoVKzBy5Eg4HA5s2LAB+/btw4wZM5CZmQmv14urrroK77zzTthxm09fkyQJL774IgoKCuB2uzF48GAsW7bM2t58WuDLL7+M5ORkvP3228jNzYXX68XkyZPDwqCu67j33nuRnJyM1NRUzJ8/H7Nnz0Z+fn6757xhwwZcd911cLlc6NOnD+69917U19cDAP7+97/D6/Viz5491v4//elPkZOTg4aGBgDAP/7xD4waNQoJCQnIysrCHXfcgWPHjrU4l7fffhsjRoyAy+XCjTfeiGPHjmHFihXIzc1FYmIi7rjjDuuYADBhwgQUFRWhqKgISUlJSEtLw4MPPgghRJvnUl1djR/+8IdIT09HYmIibrzxRuzYscPavmPHDtxwww1ISEhAYmIiRo4ciY8++qjdrw8REbWO4YqIiM7bggUL8Nhjj2HXrl0YPnw46urqMGXKFKxZswYff/wxJk+ejGnTpuHgwYPtHmfRokW49dZb8emnn2LKlCmYOXMmqqqq2ty/oaEBf/jDH/CPf/wD69evx8GDB/Hzn//c2v7444/jlVdewUsvvYQPPvgANTU1KC0tbbeGffv2YfLkyfjWt76FTz/9FK+99ho2bNiAoqIiAMCsWbOs2nRdx/Lly/Hiiy/ilVdegdvtBgBomoZHHnkEO3bsQGlpKb788kvceeedLT7XQw89hGeeeQYbN27EoUOHcOutt+LJJ5/EP//5TyxfvhyrVq3C008/Hfaav/3tb7DZbNiyZQv+9Kc/4YknnsCLL77Y5vnccsstVmjbtm0brrzyStx0003W13XmzJno3bs3tm7dim3btmHBggVQVbXdrxEREbVBEBERddBLL70kkpKSrOfvvfeeACBKS0vP+trLLrtMPP3009bzfv36if/5n/+xngMQv/rVr6zndXV1AoBYsWJF2Oc6deqUVQsAsXfvXus1zz77rMjMzLSeZ2Zmit///vfWc13XRd++fcWMGTParPMHP/iBmDNnTljb+++/L2RZFj6fTwghRFVVlejdu7f4yU9+IjIzM8Vvf/vbds9969atAoCora0NO5d33nnH2mfx4sUCgNi3b5/Vdvfdd4u8vDzr+fjx40Vubq4wTdNqmz9/vsjNzbWeN/26vv/++yIxMVH4/f6wegYOHCj+/Oc/CyGESEhIEC+//HK79RMRUcdw5IqIiM7bqFGjwp7X1dXh5z//OXJzc5GcnAyv14tdu3addeRq+PDh1scejweJiYlh0+mac7vdGDhwoPU8Ozvb2v/06dOorKzE6NGjre2KomDkyJHt1rBjxw68/PLL8Hq91iMvLw+maWL//v0AgJSUFCxZsgTPPfccBg4ciAULFoQdY9u2bZg2bRr69u2LhIQEjB8/HgBanH/T883MzITb7cYll1wS1tb8/K+++mpIkmQ9Hzt2LPbs2QPDMFo9l7q6OqSmpoadz/79+7Fv3z4AwLx58/DDH/4QEydOxGOPPWa1ExFR53FBCyIiOm8ejyfs+c9//nOsXr0af/jDHzBo0CC4XC58+9vfRjAYbPc4zaejSZIE0zQ7tb9o5/qjjqirq8Pdd9+Ne++9t8W2vn37Wh+vX78eiqLg6NGjqK+vR0JCAgCgvr4eeXl5yMvLwyuvvIL09HQcPHgQeXl5Lc6/af2SJHX6/DtyLtnZ2Vi7dm2LbcnJyQBCUxPvuOMOLF++HCtWrMCvf/1rvPrqqygoKDjnz0tE1F0xXBERUcR98MEHuPPOO6036HV1dfjyyy8vag1JSUnIzMzE1q1bcf311wMADMPA9u3bccUVV7T5uiuvvBI7d+7EoEGD2txn48aNePzxx/HGG29g/vz5KCoqwt/+9jcAQFlZGU6ePInHHnsMffr0AYCILhCxefPmsOcffvghBg8eDEVRWj2XiooK2Gw29O/fv81jDhkyBEOGDMHPfvYz3H777XjppZcYroiIzgGnBRIRUcQNHjwYxcXF+OSTT7Bjxw7ccccd5zUCc67++7//G4sXL8bSpUtRXl6OuXPn4tSpU2HT6pqbP38+Nm7ciKKiInzyySfYs2cPli5dai1oUVtbi+9973u49957cfPNN+OVV17Ba6+9hn//+98AQqNbdrsdTz/9NL744gssW7YMjzzySMTO6eDBg5g3bx7Ky8vxr3/9C08//TTmzp3b6r4TJ07E2LFjkZ+fj1WrVuHLL7/Exo0b8cADD+Cjjz6Cz+dDUVER1q5diwMHDuCDDz7A1q1bkZubG7F6iYi6E45cERFRxD3xxBP4/ve/j2uuuQZpaWmYP38+ampqLnod8+fPR0VFBWbNmgVFUTBnzhzk5eW1OsrTaPjw4Vi3bh0eeOABXHfddRBCYODAgfjOd74DAJg7dy48Hg8effRRAMCwYcPw6KOP4u6778bYsWPRq1cvvPzyy/jlL3+Jp556CldeeSX+8Ic/YPr06RE5p1mzZsHn82H06NFQFAVz585t82bMkiThrbfewgMPPIC77roLx48fR1ZWFq6//npkZmZCURScPHkSs2bNQmVlJdLS0lBYWIhFixZFpFYiou5GEuc7OZ2IiChGmKaJ3Nxc3HrrrREdTbpYJkyYgCuuuCLs/mBERNR1cOSKiIji1oEDB7Bq1SqMHz8egUAAzzzzDPbv34877rgj2qUREVEc4jVXREQUt2RZxssvv4yrrroK48aNw2effYZ33nmH1xQREdEFwWmBREREREREEcCRKyIiIiIioghguCIiIiIiIooAhisiIiIiIqIIYLgiIiIiIiKKAIYrIiIiIiKiCGC4IiIiIiIiigCGKyIiIiIioghguCIiIiIiIoqA/w+jNVBa03GqigAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MODEL 3: GDA\n",
        "\n",
        "# Separate features and target variable\n",
        "X_train = train_data.drop('Approved', axis=1).values  # Training features\n",
        "y_train = train_data['Approved'].values              # Training labels\n",
        "\n",
        "X_test = test_data.drop('Approved', axis=1).values   # Testing features\n",
        "y_test = test_data['Approved'].values              # Testing labels\n",
        "\n",
        "X_dev = dev_data.drop('Approved', axis=1).values   # Dev features\n",
        "y_dev = dev_data['Approved'].values              # Dev labels\n",
        "\n",
        "# Number of classes and features\n",
        "K = len(np.unique(y_train))  # Number of classes (assuming binary classification here)\n",
        "d = X_train.shape[1]         # Number of features (number of cols)\n",
        "n_train = X_train.shape[0]   # Number of training samples (number of rows)\n",
        "\n",
        "# Step 1: Compute the parameters\n",
        "mus = np.zeros((K, d))  # Means for each class\n",
        "Sigmas = np.zeros((K, d, d))  # Covariance matrices for each class\n",
        "phis = np.zeros(K)  # Priors for each class\n",
        "\n",
        "for k in range(K):\n",
        "    X_k = X_train[y_train == k]   # Extract samples of class k\n",
        "    mus[k] = np.mean(X_k, axis=0) # Mean vector of class k\n",
        "    Sigmas[k] = np.cov(X_k.T)     # Covariance matrix of class k\n",
        "    phis[k] = X_k.shape[0] / float(n_train)  # Prior for class k\n",
        "\n",
        "# Step 2: Define the prediction function\n",
        "def gda_predictions(x, mus, Sigmas, phis, epsilon=1e-6):\n",
        "    n, d = x.shape  # Number of samples and features\n",
        "    K = len(phis)   # Number of classes\n",
        "\n",
        "    # Initialize an array to store class log-probabilities\n",
        "    log_pxy = np.zeros((K, n))\n",
        "\n",
        "    for k in range(K):\n",
        "        # Regularize the covariance matrix by adding epsilon to the diagonal\n",
        "        Sigma_k = Sigmas[k] + epsilon * np.eye(d)\n",
        "\n",
        "        # Compute the log determinant and inverse of the regularized covariance matrix\n",
        "        inv_Sigma = np.linalg.pinv(Sigma_k)\n",
        "        det_Sigma = np.linalg.det(Sigma_k)\n",
        "\n",
        "        # Calculate (x - mu)^T * inv(Sigma) * (x - mu) for each sample\n",
        "        for i in range(n):\n",
        "            diff = x[i, :] - mus[k]  # Shape (1, d)\n",
        "\n",
        "            log_pxy[k, i] = - 0.5 * np.dot(np.dot(np.reshape(diff, (1, d)), inv_Sigma), diff)\n",
        "            - 0.5 * d * np.log(2 * np.pi)\n",
        "            - 0.5 * np.log(det_Sigma)\n",
        "            + np.log(phis[k])\n",
        "\n",
        "    # Predict class by choosing the class with the maximum log posterior\n",
        "    return log_pxy.argmax(axis=0), log_pxy\n",
        "\n",
        "# Step 3: Get predictions on train, dev, and test sets\n",
        "train_idx, _ = gda_predictions(X_train, mus, Sigmas, phis)\n",
        "dev_idx, _ = gda_predictions(X_dev, mus, Sigmas, phis)\n",
        "test_idx, _ = gda_predictions(X_test, mus, Sigmas, phis)\n",
        "\n",
        "# Metrics\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, train_idx)\n",
        "balanced_accuracy_dev = balanced_accuracy_score(y_dev, dev_idx)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, test_idx)\n",
        "print(\"Balanced accuracy on train data: \", balanced_accuracy_train)\n",
        "print(\"Balanced accuracy on dev data: \", balanced_accuracy_dev)\n",
        "print(\"Balanced accuracy on test data: \", balanced_accuracy_test)\n"
      ],
      "metadata": {
        "id": "rKeTv12XtEeg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a1d52813-5c1d-4a59-c988-ca4bbb5623fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced accuracy on train data:  0.8893254262416606\n",
            "Balanced accuracy on dev data:  0.7524154589371981\n",
            "Balanced accuracy on test data:  0.8469534360394668\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-74f5a06453bd>:49: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  log_pxy[k, i] = - 0.5 * np.dot(np.dot(np.reshape(diff, (1, d)), inv_Sigma), diff)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#MODEL 4: NAIVE BAYES\n",
        "from scipy.sparse import csr_matrix # Import csr_matrix to create sparse matrix\n",
        "# Directly pulled from lecture notes\n",
        "n = X_train.shape[0] # size of the dataset\n",
        "d = X_train.shape[1] # number of features in our dataset\n",
        "K = 2 # number of clases (either a disaster tweet or not; hence, bernoulli)\n",
        "a = 1 # pseudo-count for laplace smoothening\n",
        "\n",
        "# these are the shapes of the parameters; initializing phi matrix K x d and psi array of length K\n",
        "psis = np.zeros([K,d])\n",
        "phis = np.zeros([K])\n",
        "\n",
        "# we now compute the parameters\n",
        "for k in range(K):\n",
        "    X_k = X_train[y_train == k] # data for class k\n",
        "    psis[k] = (np.sum(X_k, axis=0) + a) / (X_k.shape[0] + 2*a) # probability (i.e., mean of each column for class k) of each feature word being present in class k\n",
        "    phis[k] = X_k.shape[0]/ float(n) # prior probability of class k\n",
        "\n",
        "# Computing predictions using Bayes' rule and parameters derived above\n",
        "def nb_predictions(x, psis, phis):\n",
        "    \"\"\"This returns class assignments and scores under the NB model.\n",
        "\n",
        "    We compute \\arg\\max_y p(y|x) as \\arg\\max_y p(x|y)p(y)\n",
        "    \"\"\"\n",
        "    # adjust shapes\n",
        "    n, d = x.shape\n",
        "    # Convert the DataFrame to a sparse matrix\n",
        "    x = csr_matrix(x).toarray().reshape(1,n,d) # Convert x to a sparse matrix before calling toarray()\n",
        "    psis = np.reshape(psis, (K, 1, d))\n",
        "\n",
        "    psis = psis.clip(1e-14, 1-1e-14) # clip probabilities to avoid log(0)\n",
        "\n",
        "    # compute log-probabilities\n",
        "    logpy = np.log(phis).reshape([K,1])\n",
        "    logpxy = x * np.log(psis) + (1-x) * np.log(1-psis)\n",
        "    logpyx = logpxy.sum(axis=2) + logpy\n",
        "\n",
        "    return logpyx.argmax(axis=0).flatten()\n",
        "\n",
        "    #Predictions for train, dev, and test\n",
        "    train_idx = nb_predictions(X_train, psis, phis)\n",
        "    dev_idx = nb_predictions(X_dev, psis, phis)\n",
        "    test_idx = nb_predictions(X_test, psis, phis)\n",
        "\n",
        "# Metrics\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, train_idx)\n",
        "balanced_accuracy_dev = balanced_accuracy_score(y_dev, dev_idx)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, test_idx)\n",
        "print(\"Balanced accuracy on train data: \", balanced_accuracy_train)\n",
        "print(\"Balanced accuracy on dev data: \", balanced_accuracy_dev)\n",
        "print(\"Balanced accuracy on test data: \", balanced_accuracy_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QaEBUzwsTHmU",
        "outputId": "c14fa170-d700-4d24-c74d-3cbb521a98c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced accuracy on train data:  0.8893254262416606\n",
            "Balanced accuracy on dev data:  0.7524154589371981\n",
            "Balanced accuracy on test data:  0.8469534360394668\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MODEL #5: KNN\n",
        "from sklearn import neighbors\n",
        "\n",
        "# Initialize the model; to select the point x that is closest to query point x', we'll use the Euclidean distance (or equivalently, Minkowski with p=2)\n",
        "nearest_model = neighbors.KNeighborsClassifier(n_neighbors=30, metric='minkowski', p=2)\n",
        "\n",
        "# Train the model on our training data\n",
        "nearest_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict targets of testing data\n",
        "y_test_pred = nearest_model.predict(X_test)\n",
        "\n",
        "#Predictions for train, dev, and test\n",
        "train_idx = nearest_model.predict(X_train)\n",
        "dev_idx = nearest_model.predict(X_dev)\n",
        "test_idx = nearest_model.predict(X_test)\n",
        "\n",
        "# Metrics\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, train_idx)\n",
        "balanced_accuracy_dev = balanced_accuracy_score(y_dev, dev_idx)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, test_idx)\n",
        "print(\"Balanced accuracy on train data: \", balanced_accuracy_train)\n",
        "print(\"Balanced accuracy on dev data: \", balanced_accuracy_dev)\n",
        "print(\"Balanced accuracy on test data: \", balanced_accuracy_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ls1RU1gy6Fh4",
        "outputId": "3521c0b4-1498-46cc-ede9-0e3ccf4110d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced accuracy on train data:  0.8363973313565605\n",
            "Balanced accuracy on dev data:  0.7463768115942029\n",
            "Balanced accuracy on test data:  0.8471784663320062\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MEASURING FEATURE IMPORTANCE\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "importance = our_log_reg3.coef_[0]\n",
        "feature_names = X_train.columns\n",
        "\n",
        "num_features = min(len(feature_names), len(importance))\n",
        "\n",
        "for i in range(num_features):\n",
        "  print('Feature: %s, Score: %.5f' % (feature_names[i], importance[i]))\n",
        "  plt.bar(feature_names[i], importance[i])\n",
        "\n",
        "plt.xlabel('Variable')\n",
        "plt.ylabel('Feature Importance')\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "xhStz-tugwvJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 747
        },
        "outputId": "860023d1-95db-4463-df92-6eabc7bf7bc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature: Gender, Score: 0.00000\n",
            "Feature: Age, Score: 0.08820\n",
            "Feature: Debt, Score: -0.28740\n",
            "Feature: Married, Score: 0.00000\n",
            "Feature: YearsEmployed, Score: 0.28797\n",
            "Feature: PriorDefault, Score: 0.00000\n",
            "Feature: Employed, Score: 0.78001\n",
            "Feature: CreditScore, Score: 0.00000\n",
            "Feature: DriversLicense, Score: 0.05485\n",
            "Feature: Income, Score: -0.19018\n",
            "Feature: Ethnicity_Asian, Score: 0.15238\n",
            "Feature: Ethnicity_Black, Score: 0.00000\n",
            "Feature: Ethnicity_Latino, Score: 0.00000\n",
            "Feature: Ethnicity_Other, Score: -0.56608\n",
            "Feature: Ethnicity_White, Score: 0.52027\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
